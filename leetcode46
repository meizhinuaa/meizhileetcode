/*全排列
*给定一个没有重复数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

思路：用回溯算法，解决一个回溯问题，实际上就是一个决策树的遍历过程。你只需要思考 3 个问题：

1、路径：也就是已经做出的选择。

2、选择列表：也就是你当前可以做的选择。

3、结束条件：也就是到达决策树底层，无法再做选择的条件
* 回溯算法的框架：

result = []
def backtrack(路径, 选择列表):
    if 满足结束条件:
        result.add(路径)
        return

    for 选择 in 选择列表:
        做选择
        backtrack(路径, 选择列表)
        撤销选择

其核心就是 for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」
*
*
*
* */

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class leetcode46 {
    //结果
    List<List<Integer>>  res=new LinkedList<>();
    public List<List<Integer>> permute(int[] nums) {
        //记录路径
        LinkedList<Integer>  track=new LinkedList<>();

        int len=nums.length;

        if(len==0){
            return null;
        }

        backtrack(nums,track);
        return res;

    }

    public void backtrack(int[] nums,LinkedList<Integer> track){
        //递归截至条件
        /*track 这个变量所指向的对象在递归的过程中只有一份，深度优先遍历完成以后，
        因为回到了根结点（因为我们之前说了，从深层结点回到浅层结点的时候，需要撤销之前的选择），
        因此 track 这个变量回到根结点以后都为空。
        在 Java 中，因为都是值传递，对象类型变量在传参的过程中，复制的都是变量的地址。
        这些地址被添加到 res 变量，但实际上指向的是同一块内存地址，因此我们会看到 6 个空的列表对象。
        解决的方法很简单，在 res.add(track); 这里做一次拷贝即可。

        *
        * */
        if(track.size()==nums.length){
            res.add(new LinkedList<>(track));
            return;
        }

        for (int i = 0; i <nums.length ; i++) {
            //全排列需要没有重复的数字
            if(track.contains(nums[i])){
                continue;
            }
            //做选择
            track.add(nums[i]);
            //进入下一层决策树
            backtrack(nums,track);
            //取消选择
            track.removeLast();
        }
    }




}
