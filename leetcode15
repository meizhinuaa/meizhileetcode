/*三数之和
*给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]

思路：用双指针来做
* 1，首先将数组排序
* 2，定位一个元素k(0~nums.length-2),然后i，j为遍历的双指针，范围是（k+1，nums.length）
*       1），如果nums[k]>0，那么直接退出进行下一个循环
*       2），如果nums[k]==nums[k-1]，那么退出，进行下一个循环，因为之前已经讨论过这个情况
* 3，求和sum=nums[k]+nums[i]+nums[j]
*       1），如果sum>0,那么j--
*       2），如果sum<0,那么i++
*
*
* */

import java.lang.reflect.Array;
import java.util.*;

public class leetcode15 {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result=new ArrayList<>();

        if(nums.length<3){
            return result;
        }
        //排序
        Arrays.sort(nums);

        for (int k = 0; k <nums.length-2 ; k++) {
            if(nums[k]>0){
                break;
            }
            //去重
            if(k>0 && nums[k]==nums[k-1]){
                continue;
            }
            //双指针
            int L=k+1;
            int R=nums.length-1;

            while (L<R){
                int sum=nums[k]+nums[L]+nums[R];

                if(sum==0){
                    List<Integer> list=new ArrayList<>();
                    list.add(nums[k]);
                    list.add(nums[L]);
                    list.add(nums[R]);
                    result.add(list);
                    //去重
                    while(L<R && nums[L]==nums[L+1]) L++;
                    while(L<R && nums[R]==nums[R-1]) R--;

                    R--;
                    L++;
                }else if(sum>0){
                    R--;
                }else if(sum<0){
                    L++;
                }
            }
        }
        return result;
    }
}
